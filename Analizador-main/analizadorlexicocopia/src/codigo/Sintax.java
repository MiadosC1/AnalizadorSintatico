
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 22 21:42:20 PDT 2025
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 22 21:42:20 PDT 2025
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\004\005\000\002\005\005\000\002\006\006" +
    "\000\002\006\004\000\002\007\007\000\002\010\005\000" +
    "\002\011\003\000\002\011\004\000\002\011\003\000\002" +
    "\012\004\000\002\015\010\000\002\013\005\000\002\014" +
    "\006\000\002\016\006\000\002\017\005\000\002\020\017" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\030\002\uffff\005\011\010\016\011\031\013" +
    "\006\014\030\026\020\040\010\042\027\141\015\143\014" +
    "\001\002\000\032\002\ufff2\005\ufff2\010\ufff2\011\ufff2\013" +
    "\ufff2\014\ufff2\026\ufff2\040\ufff2\042\ufff2\141\ufff2\142\ufff2" +
    "\143\ufff2\001\002\000\032\002\ufff9\005\ufff9\010\ufff9\011" +
    "\ufff9\013\ufff9\014\ufff9\026\ufff9\040\ufff9\042\ufff9\141\ufff9" +
    "\142\ufff9\143\ufff9\001\002\000\006\010\107\072\106\001" +
    "\002\000\032\002\uffff\005\011\010\016\011\031\013\006" +
    "\014\030\026\020\040\010\042\027\141\015\142\uffff\143" +
    "\014\001\002\000\004\143\102\001\002\000\004\143\073" +
    "\001\002\000\032\002\ufff5\005\ufff5\010\ufff5\011\ufff5\013" +
    "\ufff5\014\ufff5\026\ufff5\040\ufff5\042\ufff5\141\ufff5\142\ufff5" +
    "\143\ufff5\001\002\000\032\002\ufffa\005\ufffa\010\ufffa\011" +
    "\ufffa\013\ufffa\014\ufffa\026\ufffa\040\ufffa\042\ufffa\141\ufffa" +
    "\142\ufffa\143\ufffa\001\002\000\010\010\055\011\043\013" +
    "\053\001\002\000\030\005\011\010\016\011\031\013\006" +
    "\014\030\026\020\040\010\042\027\141\015\142\uffff\143" +
    "\014\001\002\000\034\002\uffe9\005\uffe9\007\050\010\uffe9" +
    "\011\uffe9\013\uffe9\014\uffe9\026\uffe9\040\uffe9\042\uffe9\141" +
    "\uffe9\142\uffe9\143\uffe9\001\002\000\032\002\ufffc\005\ufffc" +
    "\010\ufffc\011\ufffc\013\ufffc\014\ufffc\026\ufffc\040\ufffc\042" +
    "\ufffc\141\ufffc\142\ufffc\143\ufffc\001\002\000\032\002\uffeb" +
    "\005\uffeb\010\uffeb\011\uffeb\013\uffeb\014\uffeb\026\uffeb\040" +
    "\uffeb\042\uffeb\141\uffeb\142\uffeb\143\uffeb\001\002\000\032" +
    "\002\ufffb\005\ufffb\010\ufffb\011\ufffb\013\ufffb\014\ufffb\026" +
    "\ufffb\040\ufffb\042\ufffb\141\ufffb\142\ufffb\143\ufffb\001\002" +
    "\000\034\002\ufff8\005\ufff8\010\ufff8\011\ufff8\013\ufff8\014" +
    "\ufff8\026\ufff8\040\ufff8\042\ufff8\133\047\141\ufff8\142\ufff8" +
    "\143\ufff8\001\002\000\032\002\ufffd\005\ufffd\010\ufffd\011" +
    "\ufffd\013\ufffd\014\ufffd\026\ufffd\040\ufffd\042\ufffd\141\ufffd" +
    "\142\ufffd\143\ufffd\001\002\000\004\002\046\001\002\000" +
    "\032\002\ufff6\005\ufff6\010\ufff6\011\ufff6\013\ufff6\014\ufff6" +
    "\026\ufff6\040\ufff6\042\ufff6\141\ufff6\142\ufff6\143\ufff6\001" +
    "\002\000\032\002\ufff3\005\ufff3\010\ufff3\011\ufff3\013\ufff3" +
    "\014\ufff3\026\ufff3\040\ufff3\042\ufff3\141\ufff3\142\ufff3\143" +
    "\ufff3\001\002\000\004\143\042\001\002\000\004\021\036" +
    "\001\002\000\004\147\035\001\002\000\032\002\ufff7\005" +
    "\ufff7\010\ufff7\011\ufff7\013\ufff7\014\ufff7\026\ufff7\040\ufff7" +
    "\042\ufff7\141\ufff7\142\ufff7\143\ufff7\001\002\000\032\002" +
    "\ufff4\005\ufff4\010\ufff4\011\ufff4\013\ufff4\014\ufff4\026\ufff4" +
    "\040\ufff4\042\ufff4\141\ufff4\142\ufff4\143\ufff4\001\002\000" +
    "\032\002\ufffe\005\ufffe\010\ufffe\011\ufffe\013\ufffe\014\ufffe" +
    "\026\ufffe\040\ufffe\042\ufffe\141\ufffe\142\ufffe\143\ufffe\001" +
    "\002\000\032\002\uffee\005\uffee\010\uffee\011\uffee\013\uffee" +
    "\014\uffee\026\uffee\040\uffee\042\uffee\141\uffee\142\uffee\143" +
    "\uffee\001\002\000\004\010\037\001\002\000\004\141\015" +
    "\001\002\000\032\002\uffe4\005\uffe4\010\uffe4\011\uffe4\013" +
    "\uffe4\014\uffe4\026\uffe4\040\uffe4\042\uffe4\141\uffe4\142\uffe4" +
    "\143\uffe4\001\002\000\004\147\045\001\002\000\004\011" +
    "\043\001\002\000\004\144\044\001\002\000\034\002\ufff0" +
    "\005\ufff0\010\ufff0\011\ufff0\013\ufff0\014\ufff0\026\ufff0\040" +
    "\ufff0\042\ufff0\141\ufff0\142\ufff0\143\ufff0\147\ufff0\001\002" +
    "\000\032\002\ufff1\005\ufff1\010\ufff1\011\ufff1\013\ufff1\014" +
    "\ufff1\026\ufff1\040\ufff1\042\ufff1\141\ufff1\142\ufff1\143\ufff1" +
    "\001\002\000\004\002\001\001\002\000\032\002\uffea\005" +
    "\uffea\010\uffea\011\uffea\013\uffea\014\uffea\026\uffea\040\uffea" +
    "\042\uffea\141\uffea\142\uffea\143\uffea\001\002\000\034\002" +
    "\uffe8\005\uffe8\010\uffe8\011\uffe8\013\uffe8\014\uffe8\026\uffe8" +
    "\040\uffe8\042\uffe8\133\uffe8\141\uffe8\142\uffe8\143\uffe8\001" +
    "\002\000\004\142\052\001\002\000\032\002\uffec\005\uffec" +
    "\010\uffec\011\uffec\013\uffec\014\uffec\026\uffec\040\uffec\042" +
    "\uffec\141\uffec\142\uffec\143\uffec\001\002\000\004\010\060" +
    "\001\002\000\004\133\056\001\002\000\004\007\050\001" +
    "\002\000\004\144\057\001\002\000\032\002\uffe5\005\uffe5" +
    "\010\uffe5\011\uffe5\013\uffe5\014\uffe5\026\uffe5\040\uffe5\042" +
    "\uffe5\141\uffe5\142\uffe5\143\uffe5\001\002\000\004\022\061" +
    "\001\002\000\004\133\062\001\002\000\004\147\063\001" +
    "\002\000\004\010\064\001\002\000\004\007\065\001\002" +
    "\000\004\133\066\001\002\000\004\147\067\001\002\000" +
    "\004\010\070\001\002\000\004\023\071\001\002\000\004" +
    "\144\072\001\002\000\032\002\uffe2\005\uffe2\010\uffe2\011" +
    "\uffe2\013\uffe2\014\uffe2\026\uffe2\040\uffe2\042\uffe2\141\uffe2" +
    "\142\uffe2\143\uffe2\001\002\000\004\010\055\001\002\000" +
    "\004\133\075\001\002\000\004\144\076\001\002\000\004" +
    "\141\015\001\002\000\032\002\uffe7\005\uffe7\010\uffe7\011" +
    "\uffe7\013\uffe7\014\uffe7\026\uffe7\040\uffe7\042\uffe7\141\uffe7" +
    "\142\uffe7\143\uffe7\001\002\000\004\141\015\001\002\000" +
    "\004\141\015\001\002\000\006\010\055\013\053\001\002" +
    "\000\032\002\uffe3\005\uffe3\010\uffe3\011\uffe3\013\uffe3\014" +
    "\uffe3\026\uffe3\040\uffe3\042\uffe3\141\uffe3\142\uffe3\143\uffe3" +
    "\001\002\000\032\002\uffe6\005\uffe6\010\uffe6\011\uffe6\013" +
    "\uffe6\014\uffe6\026\uffe6\040\uffe6\042\uffe6\141\uffe6\142\uffe6" +
    "\143\uffe6\001\002\000\006\002\000\142\000\001\002\000" +
    "\004\143\112\001\002\000\004\022\110\001\002\000\004" +
    "\133\111\001\002\000\032\002\uffef\005\uffef\010\uffef\011" +
    "\uffef\013\uffef\014\uffef\026\uffef\040\uffef\042\uffef\141\uffef" +
    "\142\uffef\143\uffef\001\002\000\004\144\113\001\002\000" +
    "\004\141\015\001\002\000\032\002\uffed\005\uffed\010\uffed" +
    "\011\uffed\013\uffed\014\uffed\026\uffed\040\uffed\042\uffed\141" +
    "\uffed\142\uffed\143\uffed\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\040\002\023\003\006\004\033\005\022\006" +
    "\016\007\020\010\012\011\004\012\021\013\031\014\024" +
    "\015\011\016\032\017\025\020\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\002\104" +
    "\003\006\004\033\005\022\006\016\007\020\010\012\011" +
    "\004\012\021\013\031\014\024\015\011\016\032\017\025" +
    "\020\003\001\001\000\006\014\077\020\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\053\001\001\000\040\002\050\003\006\004\033\005" +
    "\022\006\016\007\020\010\012\011\004\012\021\013\031" +
    "\014\024\015\011\016\032\017\025\020\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\076\001\001\000\002\001\001\000" +
    "\004\010\103\001\001\000\004\010\102\001\001\000\004" +
    "\012\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\113\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTADOR ::= ParentesisApertura Tipodato Identificador Asignacion NumeroEntero Delimitador Identificador Comparar NumeroEntero Delimitador Identificador Incremento ParentesisCerradura 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CICLOPARA ::= Ciclos CONTADOR INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOPARA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ESPACIO ::= Acceso Reservadas Identificador INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPACIO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONDICIONADOR ::= ParentesisApertura COMPARADOR NumeroEntero ParentesisCerradura 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONADOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MIENTRAS ::= Ciclos CONDICIONADOR INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIENTRAS",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONDICIONPREGUNTA ::= Pregunta ParentesisApertura COMPARADOR NumeroEntero ParentesisCerradura INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONPREGUNTA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // COMPARADOR ::= Identificador Comparar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARADOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECISION ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECISION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECISION ::= COMPARADOR NumeroEntero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECISION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECISION ::= Logico 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECISION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCIONES ::= LlaveApertura GRAMATICA LlaveCerradura 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INICIAR ::= Tipodato FuncionesEspeciales ParentesisApertura ParentesisCerradura INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIAR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VARIABLE ::= Literal Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VARIABLE ::= Tipodato Identificador Asignacion NumeroEntero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ORACION ::= ParentesisApertura Literal ParentesisCerradura 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ORACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IMPRIMIDA ::= ES ORACION Delimitador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIDA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= CONTADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= CICLOPARA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= ESPACIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= CONDICIONPREGUNTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= CONDICIONADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= MIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= COMPARADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= DECISION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= INICIAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= ORACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCION ::= IMPRIMIDA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // GRAMATICA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // GRAMATICA ::= INSTRUCCION GRAMATICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GRAMATICA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= GRAMATICA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

